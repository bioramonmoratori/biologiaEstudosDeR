t.test                  package:stats                  R Documentation

_S_t_u_d_e_n_t'_s _t-_T_e_s_t

_D_e_s_c_r_i_p_t_i_o_n:

     Performs one and two sample t-tests on vectors of data.

_U_s_a_g_e:

     t.test(x, ...)
     
     ## Default S3 method:
     t.test(x, y = NULL,
            alternative = c("two.sided", "less", "greater"),
            mu = 0, paired = FALSE, var.equal = FALSE,
            conf.level = 0.95, ...)
     
     ## S3 method for class 'formula'
     t.test(formula, data, subset, na.action, ...)
     
_A_r_g_u_m_e_n_t_s:

       x: a (non-empty) numeric vector of data values.

       y: an optional (non-empty) numeric vector of data values.

alternative: a character string specifying the alternative hypothesis,
          must be one of ‘"two.sided"’ (default), ‘"greater"’ or
          ‘"less"’.  You can specify just the initial letter.

      mu: a number indicating the true value of the mean (or difference
          in means if you are performing a two sample test).

  paired: a logical indicating whether you want a paired t-test.

var.equal: a logical variable indicating whether to treat the two
          variances as being equal. If ‘TRUE’ then the pooled variance
          is used to estimate the variance otherwise the Welch (or
          Satterthwaite) approximation to the degrees of freedom is
          used.

conf.level: confidence level of the interval.

 formula: a formula of the form ‘lhs ~ rhs’ where ‘lhs’ is a numeric
          variable giving the data values and ‘rhs’ either ‘1’ for a
          one-sample or paired test or a factor with two levels giving
          the corresponding groups. If ‘lhs’ is of class ‘"Pair"’ and
          ‘rhs’ is ‘1’, a paired test is done.

    data: an optional matrix or data frame (or similar: see
          ‘model.frame’) containing the variables in the formula
          ‘formula’.  By default the variables are taken from
          ‘environment(formula)’.

  subset: an optional vector specifying a subset of observations to be
          used.

na.action: a function which indicates what should happen when the data
          contain ‘NA’s.  Defaults to ‘getOption("na.action")’.

     ...: further arguments to be passed to or from methods.

_D_e_t_a_i_l_s:

     ‘alternative = "greater"’ is the alternative that ‘x’ has a larger
     mean than ‘y’. For the one-sample case: that the mean is positive.

     If ‘paired’ is ‘TRUE’ then both ‘x’ and ‘y’ must be specified and
     they must be the same length.  Missing values are silently removed
     (in pairs if ‘paired’ is ‘TRUE’).  If ‘var.equal’ is ‘TRUE’ then
     the pooled estimate of the variance is used.  By default, if
     ‘var.equal’ is ‘FALSE’ then the variance is estimated separately
     for both groups and the Welch modification to the degrees of
     freedom is used.

     If the input data are effectively constant (compared to the larger
     of the two means) an error is generated.

_V_a_l_u_e:

     A list with class ‘"htest"’ containing the following components:

statistic: the value of the t-statistic.

parameter: the degrees of freedom for the t-statistic.

 p.value: the p-value for the test.

conf.int: a confidence interval for the mean appropriate to the
          specified alternative hypothesis.

estimate: the estimated mean or difference in means depending on
          whether it was a one-sample test or a two-sample test.

null.value: the specified hypothesized value of the mean or mean
          difference depending on whether it was a one-sample test or a
          two-sample test.

  stderr: the standard error of the mean (difference), used as
          denominator in the t-statistic formula.

alternative: a character string describing the alternative hypothesis.

  method: a character string indicating what type of t-test was
          performed.

data.name: a character string giving the name(s) of the data.

_S_e_e _A_l_s_o:

     ‘prop.test’

_E_x_a_m_p_l_e_s:

     require(graphics)
     
     t.test(1:10, y = c(7:20))      # P = .00001855
     t.test(1:10, y = c(7:20, 200)) # P = .1245    -- NOT significant anymore
     
     ## Classical example: Student's sleep data
     plot(extra ~ group, data = sleep)
     ## Traditional interface
     with(sleep, t.test(extra[group == 1], extra[group == 2]))
     
     ## Formula interface
     t.test(extra ~ group, data = sleep)
     
     ## Formula interface to one-sample test
     t.test(extra ~ 1, data = sleep)
     
     ## Formula interface to paired test
     ## The sleep data are actually paired, so could have been in wide format:
     sleep2 <- reshape(sleep, direction = "wide", 
                       idvar = "ID", timevar = "group")
     t.test(Pair(extra.1, extra.2) ~ 1, data = sleep2)
     

